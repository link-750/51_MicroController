#include<iom16v.h>
#include<macros.h>
#define uint unsigned int
#define uchar unsigned char
#pragma interrupt_handler duoji:9

uint PWM_H[10];
uint PWM_L[10];
uint PWM_H_H[10];
uint PWM_H_L[10];
uint PWM_L_H[10];
uint PWM_L_L[10];
uint i=0,jd=0;
uint p=0,flag;
int a0,a1,a2,a3,a4,a5,a6,a7,a8,a9;  
int b0,b1,b2,b3,b4,b5,b6,b7,b8,b9;
 
/*******延时函数**********/
void delay_ms(uint x)
{
  uint i,j;
  for(i=0;i<x;i++)
     for(j=0;j<1141;j++);
}
 
 void delay_us(uint x)
 {
   while(x--);
 
 }

/*******IO口初始化***********/
void port_init(void)
{
  DDRA=0x00;
  DDRB=0x00;  
  DDRC=0x00;
  DDRD=0x00;
  PORTA=0xff;
  PORTB=0xff;
  PORTC=0xff;
  PORTD=0xff;  
}

void timer1_init(void)
{
  TCCR1B|=BIT(0);   //无分频
 //TCNT1H=0xfe;      //8000000/8=1000000 记一个数要1/1000000s 即1us 
 //TCNT1L=0xfc;      //现定时中断0.25ms  即记250个数 初值=65536-250=65276=0xFEFC
  TIMSK|=BIT(2);    //定时器1溢出中断使能
  SREG|=BIT(7);     //全局中断使能
  
}
 

void servo(int jiaodu0,int jiaodu1,int jiaodu2,int jiaodu3,int jiaodu4,int jiaodu5,int jiaodu6,int jiaodu7,int jiaodu8,int jiaodu9)
{
	int i;

	PWM_H[0]=65536-(500+50+(100*jiaodu0)/9)*8;   PWM_L[0]=65536-20000+(500-50+(100*jiaodu0)/9)*8;	
	PWM_H[1]=65536-(500+50+(100*jiaodu1)/9)*8;   PWM_L[1]=65536-20000+(500-50+(100*jiaodu1)/9)*8;	
	PWM_H[2]=65536-(500+50+(100*jiaodu2)/9)*8;   PWM_L[2]=65536-20000+(500-50+(100*jiaodu2)/9)*8;		
	PWM_H[3]=65536-(500+50+(100*jiaodu3)/9)*8;   PWM_L[3]=65536-20000+(500-50+(100*jiaodu3)/9)*8;		
	PWM_H[4]=65536-(500+50+(100*jiaodu4)/9)*8;   PWM_L[4]=65536-20000+(500-50+(100*jiaodu4)/9)*8;		
	PWM_H[5]=65536-(500+50+(100*jiaodu5)/9)*8;   PWM_L[5]=65536-20000+(500-50+(100*jiaodu5)/9)*8;		
	PWM_H[6]=65536-(500+50+(100*jiaodu6)/9)*8;   PWM_L[6]=65536-20000+(500-50+(100*jiaodu6)/9)*8;	
	PWM_H[7]=65536-(500+50+(100*jiaodu7)/9)*8;   PWM_L[7]=65536-20000+(500-50+(100*jiaodu7)/9)*8;		
	PWM_H[8]=65536-(500+50+(100*jiaodu8)/9)*8;   PWM_L[8]=65536-20000+(500-50+(100*jiaodu8)/9)*8;		
	PWM_H[9]=65536-(500+50+(100*jiaodu9)/9)*8;   PWM_L[9]=65536-20000+(500-50+(100*jiaodu9)/9)*8;		
	
					
	for(i=0;i<10;i++)
	{
		PWM_H_H[i]=PWM_H[i]/256;  
		PWM_H_L[i]=PWM_H[i]%256;
		PWM_L_H[i]=PWM_L[i]/256;  
		PWM_L_L[i]=PWM_L[i]%256;
	} 
	a0=jiaodu0;
	a1=jiaodu1;
	a2=jiaodu2;
	a3=jiaodu3;
	a4=jiaodu4;
	a5=jiaodu5;
	a6=jiaodu6;
	a7=jiaodu7;
	a8=jiaodu8;
	a9=jiaodu9;
	
}
 
void speed(int jiaodu0,int jiaodu1,int jiaodu2,int jiaodu3,int jiaodu4,int jiaodu5,int jiaodu6,int jiaodu7,int jiaodu8,int jiaodu9,
           int t0,int t1,int t2,int t3,int t4,int t5,int t6,int t7,int t8,int t9)
{
	flag=1;
	while(flag)
	{
		if(jiaodu0-a0>0){delay_ms(t0*3);a0++;}
		if(jiaodu1-a1>0){delay_ms(t1*3);a1++;}
		if(jiaodu2-a2>0){delay_ms(t2*3);a2++;}
		if(jiaodu3-a3>0){delay_ms(t3*3);a3++;}
		if(jiaodu4-a4>0){delay_ms(t4*3);a4++;}
		if(jiaodu5-a5>0){delay_ms(t5*3);a5++;}
		if(jiaodu6-a6>0){delay_ms(t6*3);a6++;}
		if(jiaodu7-a7>0){delay_ms(t7*3);a7++;}
		if(jiaodu8-a8>0){delay_ms(t8*3);a8++;}
		if(jiaodu9-a9>0){delay_ms(t9*3);a9++;}

		if(jiaodu0-a0<0){delay_ms(t0*3);a0--;}
		if(jiaodu1-a1<0){delay_ms(t1*3);a1--;}
		if(jiaodu2-a2<0){delay_ms(t2*3);a2--;}
		if(jiaodu3-a3<0){delay_ms(t3*3);a3--;}
		if(jiaodu4-a4<0){delay_ms(t4*3);a4--;}
		if(jiaodu5-a5<0){delay_ms(t5*3);a5--;}
		if(jiaodu6-a6<0){delay_ms(t6*3);a6--;}
		if(jiaodu7-a7<0){delay_ms(t7*3);a7--;}
		if(jiaodu8-a8<0){delay_ms(t8*3);a8--;}
		if(jiaodu9-a9<0){delay_ms(t9*3);a9--;}
		
		if(jiaodu0-a0==0){a0=jiaodu0;b0=1;} 
		if(jiaodu1-a1==0){a1=jiaodu1;b1=2;} 
		if(jiaodu2-a2==0){a2=jiaodu2;b2=3;} 
		if(jiaodu3-a3==0){a3=jiaodu3;b3=4;} 
		if(jiaodu4-a4==0){a4=jiaodu4;b4=5;} 
		if(jiaodu5-a5==0){a5=jiaodu5;b5=6;} 
		if(jiaodu6-a6==0){a6=jiaodu6;b6=7;} 
		if(jiaodu7-a7==0){a7=jiaodu7;b7=8;} 
		if(jiaodu8-a8==0){a8=jiaodu8;b8=9;} 
		if(jiaodu9-a9==0){a9=jiaodu9;b9=10;} 
		
		

		servo(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);
		if(b0==1&&b1==2&&b2==3&&b3==4&&b4==5&&b5==6&&b6==7&&b7==8&&b8==9&&b9==10)
		{
			flag=0;b0=0;b1=0;b2=0;b3=0;b4=0;b5=0;b6=0;b7=0;b8=0;b9=0;
		}
	}	
}
 

void main(void)
{ 
  port_init();
  
  DDRA=0xff;    //将PA口配置为输出
  DDRB=0xff;
  DDRD=0xff;
  timer1_init(); 
 // servo(96,90,158,175,145,150,5,27,95,107);
 while(1)
 {  
     uint i;
	 servo(96,180,158,175,145,150,5,27,95,107);
	 delay_ms(800);
	 speed(50,0,158,175,145,150,5,27,95,107,0,20,0,0,0,0,0,0,0,0);
	
	

  while(1);
  }

}




void duoji(void)
{
  switch(p)
	{
		case 0: TCNT1H=PWM_H_H[0];TCNT1L=PWM_H_L[0];PORTB|=BIT(0);
		break;
		case 1: TCNT1H=PWM_L_H[0];TCNT1L=PWM_L_L[0];PORTB&=~BIT(0);
		break;
		case 2: TCNT1H=PWM_H_H[1];TCNT1L=PWM_H_L[1];PORTB|=BIT(1);
		break;
		case 3: TCNT1H=PWM_L_H[1];TCNT1L=PWM_L_L[1];PORTB&=~BIT(1);
		break;
		case 4: TCNT1H=PWM_H_H[2];TCNT1L=PWM_H_L[2];PORTB|=BIT(2);
		break;
		case 5: TCNT1H=PWM_L_H[2];TCNT1L=PWM_L_L[2];PORTB&=~BIT(2);
		break;
		case 6: TCNT1H=PWM_H_H[3];TCNT1L=PWM_H_L[3];PORTB|=BIT(3);
		break;
		case 7: TCNT1H=PWM_L_H[3];TCNT1L=PWM_L_L[3];PORTB&=~BIT(3);
		break;
		case 8: TCNT1H=PWM_H_H[4];TCNT1L=PWM_H_L[4];PORTB|=BIT(4);
		break;
		case 9: TCNT1H=PWM_L_H[4];TCNT1L=PWM_L_L[4];PORTB&=~BIT(4);
		break;
		case 10: TCNT1H=PWM_H_H[5];TCNT1L=PWM_H_L[5];PORTD|=BIT(2);
		break;
		case 11: TCNT1H=PWM_L_H[5];TCNT1L=PWM_L_L[5];PORTD&=~BIT(2);		
		break;		
		case 12: TCNT1H=PWM_H_H[6];TCNT1L=PWM_H_L[6];PORTD|=BIT(3);
		break;
		case 13: TCNT1H=PWM_L_H[6];TCNT1L=PWM_L_L[6];PORTD&=~BIT(3);		
		break;	
		case 14: TCNT1H=PWM_H_H[7];TCNT1L=PWM_H_L[7];PORTD|=BIT(4);
		break;
		case 15: TCNT1H=PWM_L_H[7];TCNT1L=PWM_L_L[7];PORTD&=~BIT(4);		
		break;	
		case 16: TCNT1H=PWM_H_H[8];TCNT1L=PWM_H_L[8];PORTD|=BIT(5);
		break;
		case 17: TCNT1H=PWM_L_H[8];TCNT1L=PWM_L_L[8];PORTD&=~BIT(5);		
		break;	
		case 18: TCNT1H=PWM_H_H[9];TCNT1L=PWM_H_L[9];PORTD|=BIT(6);
		break; 
		case 19: TCNT1H=PWM_L_H[9];TCNT1L=PWM_L_L[9];PORTD&=~BIT(6);		
		break;																										
		default: p=-1;
		break;
	}
	p++;
  
}
	