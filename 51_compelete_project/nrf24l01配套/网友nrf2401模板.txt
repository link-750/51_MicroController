//发射程序
#include <STC15F104E.H>
#include <intrins.h> 
#define uchar unsigned char
//typedef unsigned char uchar; 
typedef unsigned char uint; 
//****************************************IO端口定义*************************************** 
sbit CE   = P1^4;  // 芯片使能引脚信号（输出）
sbit CSN  = P1^5;  // 从选择引脚（输出，CSN，nRF24L01）
sbit SCK  = P1^2;  // 数字输入，掌握，从引脚（输出）的奴隶 Master Out, Slave In pin (output)
sbit MOSI = P1^3;  // 串行时钟引脚，（输入）
sbit MISO = P1^0;  // 串行时钟引脚，（输出）
sbit IRQ  = P1^1;  // 中断信号，从nRF24L01（输入）
//*********************************************NRF24L01************************************* 


#define TX_ADR_WIDTH   5  // 5字节宽度的发送/接收地址
#define TX_PLOAD_WIDTH 4  // 数据通道有效数据宽度

uchar code TX_ADDRESS[TX_ADR_WIDTH] = {0x34,0x43,0x10,0x10,0x01};  // 定义一个静态发送地址
uchar RX_BUF[TX_PLOAD_WIDTH];
uchar TX_BUF[TX_PLOAD_WIDTH];
uchar flag;
//uchar DATA = 0x01;
uchar bdata sta;
sbit  RX_DR	 = sta^6;
sbit  TX_DS	 = sta^5;
sbit  MAX_RT = sta^4;

sbit LED=P3^2;
sbit FONMINQ =P3^2;

// SPI(nRF24L01)    指令
#define READ_REG    0x00  //读寄存器指令
#define WRITE_REG   0x20  //写寄存器指令
#define RD_RX_PLOAD 0x61  //读取接收数据指令
#define WR_TX_PLOAD 0xA0  //写待发数据指令
#define FLUSH_TX    0xE1  //冲洗发送 FIFO指令
#define FLUSH_RX    0xE2  //冲洗接收 FIFO指令
#define REUSE_TX_PL 0xE3  //定义重复装载数据指令
#define NOP         0xFF  //没有操作，可用于读取状态寄存器

// SPI(nRF24L01) 寄存器地址
#define CONFIG      0x00  //配置收发状态，CRC校验模式以及收发状态响应方式
#define EN_AA       0x01  //自动应答功能设置
#define EN_RXADDR   0x02  //可用信道设置
#define SETUP_AW    0x03  //收发地址宽度设置 
#define SETUP_RETR  0x04  //自动重发功能设置
#define RF_CH       0x05  //工作频率设置
#define RF_SETUP    0x06  //发射速率、功耗功能设置
#define STATUS      0x07  //状态寄存器
#define OBSERVE_TX  0x08  //发送监测功能
#define CD          0x09  //地址检测
#define RX_ADDR_P0  0x0A  //频道0接收数据地址
#define RX_ADDR_P1  0x0B  //频道1接收数据地址
#define RX_ADDR_P2  0x0C  //频道2接收数据地址
#define RX_ADDR_P3  0x0D  //频道3接收数据地址
#define RX_ADDR_P4  0x0E  //频道4接收数据地址
#define RX_ADDR_P5  0x0F  //频道5接收数据地址
#define TX_ADDR     0x10  //发送地址寄存器
#define RX_PW_P0    0x11  //接收频道0接收数据长度
#define RX_PW_P1    0x12  //接收频道1接收数据长度
#define RX_PW_P2    0x13  //接收频道2接收数据长度
#define RX_PW_P3    0x14  //接收频道3接收数据长度
#define RX_PW_P4    0x15  //接收频道4接收数据长度
#define RX_PW_P5    0x16  //接收频道5接收数据长度
#define FIFO_STATUS 0x17  //FIFO栈入栈出状态寄存器设置

void init_io(void) //初始化IO
{
	CE  = 0;        // 模式控制线, 待机
	CSN = 1;        // 片选线, SPI禁止
	SCK = 0;        // SPI时钟置低
	IRQ = 1;        // 中断复位
	LED = 1;		// 关闭指示灯
}

void delay_ms(uchar x) //延迟x毫秒
{
    uchar i, j;
    i = 0;
    for(i=0; i<x; i++)
    {
       j = 250;
       while(--j);
	   j = 250;
       while(--j);
    }
}


uchar SPI_RW(uchar byte)	//根据SPI协议，写一字节数据到nRF24L01，同时从nRF24L01读出一字节
{
	uchar i;
   	for(i=0; i<8; i++)          // 循环8次
   	{
   		MOSI = (byte & 0x80);   // byte最高位输出到MOSI
   		byte <<= 1;             // 低一位移位到最高位
   		SCK = 1;                // 拉高SCK，nRF24L01从MOSI读入1位数据，同时从MISO输出1位数据
   		byte |= MISO;       	// 读MISO到byte最低位
   		SCK = 0;            	// SCK置低
   	}
    return(byte);           	// 返回读出的一字节
}

uchar SPI_RW_Reg(uchar reg, uchar value)	//写数据value到reg寄存器
{
	uchar status;
  	CSN = 0;                   // CSN置低，开始传输数据
  	status = SPI_RW(reg);      // 选择寄存器，同时返回状态字
  	SPI_RW(value);             // 然后写数据到该寄存器
  	CSN = 1;                   // CSN拉高，结束数据传输
  	return(status);            // 返回状态寄存器
}

uchar SPI_Read(uchar reg)	//从reg寄存器读一字节
{
	uchar reg_val;
  	CSN = 0;                    // CSN置低，开始传输数据
  	SPI_RW(reg);                // 选择寄存器
  	reg_val = SPI_RW(0);        // 然后从该寄存器读数据
  	CSN = 1;                    // CSN拉高，结束数据传输
  	return(reg_val);            // 返回寄存器数据
}

uchar SPI_Read_Buf(uchar reg, uchar * pBuf, uchar bytes)	
//从reg寄存器读出bytes个字节，通常用来读取接收通道数据或接收/发送地址
{
	uchar status, i;
  	CSN = 0;                    // CSN置低，开始传输数据
  	status = SPI_RW(reg);       // 选择寄存器，同时返回状态字
  	for(i=0; i<bytes; i++)
    	pBuf[i] = SPI_RW(0);    // 逐个字节从nRF24L01读出
  	CSN = 1;                    // CSN拉高，结束数据传输
  	return(status);             // 返回状态寄存器
}

uchar SPI_Write_Buf(uchar reg, uchar * pBuf, uchar bytes)	
//把pBuf缓存中的数据写入到nRF24L01，通常用来写入发射通道数据或接收/发送地址
{
	uchar status, i;
  	CSN = 0;                    // CSN置低，开始传输数据
  	status = SPI_RW(reg);       // 选择寄存器，同时返回状态字
  	for(i=0; i<bytes; i++)
    	SPI_RW(pBuf[i]);        // 逐个字节写入nRF24L01
  	CSN = 1;                    // CSN拉高，结束数据传输
  	return(status);             // 返回状态寄存器
}

void RX_Mode(void)	//这个函数设置nRF24L01为接收模式，等待接收发送设备的数据包
{
		CE = 0;
          CSN=1;
	SPI_RW(FLUSH_RX);
  	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  
		// 接收设备接收通道0使用和发送设备相同的发送地址
  	SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);               // 使能接收通道0自动应答
  	SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);           // 使能接收通道0
  	SPI_RW_Reg(WRITE_REG + RF_CH, 0);                 // 选择射频通道0x40
  	SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH);  // 接收通道0选择和发送通道相同有效数据宽度
  	SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x27);            // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益
  	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);              // CRC使能，16位CRC校验，上电，接收模式
  	CE = 1;                                            // 拉高CE启动接收设备
}

void TX_Mode(uchar * BUF)	
//这个函数设置nRF24L01为发送模式，（CE=1持续至少10us），130us后启动发射，数据发送结束后，发送模块自动转入接收模式等待应答信号。
{
	CE = 0;
  	SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);     // 写入发送地址
  	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // 为了应答接收设备，接收通道0地址和发送地址相同
  	SPI_Write_Buf(WR_TX_PLOAD, BUF, TX_PLOAD_WIDTH);                  // 写数据包到TX FIFO
  	SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);       // 使能接收通道0自动应答
  	SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);   // 使能接收通道0
  	SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0xfa);  // 自动重发延时等待250us+86us，自动重发10次
  	SPI_RW_Reg(WRITE_REG + RF_CH, 0);         // 选择射频通道0x40
  	SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x27);    // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益
  	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);      // CRC使能，16位CRC校验，上电
	CE = 1;
}

uchar Check_ACK(bit clear)	//检查接收设备有无接收到数据包，设定没有收到应答信号是否重发
{
	if(IRQ==1);
	sta = SPI_RW(NOP);                    // 返回状态寄存器
	if(MAX_RT)
		if(clear)                         // 是否清除TX FIFO，没有清除在复位MAX_RT中断标志后重发
			SPI_RW(FLUSH_TX);
	SPI_RW_Reg(WRITE_REG + STATUS, sta);  // 清除TX_DS或MAX_RT中断标志
	IRQ = 1;
	if(TX_DS)
		return(0x00);
	else
		return(0xff);
}

void CheckButtons()	//检查按键是否按下，按下则发送一字节数据
{
	if(LED!=1)		            // 读取P3^0状态
	{
		delay_ms(20);
		if(LED!=1)			    // 读取P3^0状态
		{		
			CSN = 0;
			SPI_RW(FLUSH_TX);
			CSN = 1;
			TX_BUF[0] = 0;          // 数据送到缓存
			TX_Mode(TX_BUF);			// 把nRF24L01设置为发送模式并发送数据
			Check_ACK(1);               // 等待发送完毕，清除TX FIFO
			delay_ms(250);
			delay_ms(250);
			RX_Mode();			        // 设置为接收模式
		}
	}
}

void main(void)
{
	init_io();		              // 初始化IO
	RX_Mode();		              // 设置为接收模式
	while(1)
	{
		if(LED==1)
			FONMINQ=1;
		CheckButtons();           // 按键扫描
		sta = SPI_Read(STATUS);	  // 读状态寄存器
	      if(RX_DR)				  // 判断是否接受到数据
		{
			SPI_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH);  // 从RX FIFO读出数据
			flag = 1;
		}
		SPI_RW_Reg(WRITE_REG + STATUS, sta);  // 清除RX_DS中断标志
	      if(flag)		           // 接受完成
		{
			flag = 0;		       // 清标志
			LED = RX_BUF[0];	   // 数据送到（接收内容）LED显示
			CSN = 0;
			SPI_RW(FLUSH_RX);
			CSN = 1;

//			if(LED!=1)
				FONMINQ=0;
			delay_ms(250);
			delay_ms(250);
  			LED = 1;		       // 关闭LED
		}
	}
}
