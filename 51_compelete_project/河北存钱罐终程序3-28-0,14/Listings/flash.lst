C51 COMPILER V9.52.0.0   FLASH                                                             04/05/2017 12:41:54 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN .\Objects\flash.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE flash.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\flash.lst) TABS(2) OBJECT(.\Objects\flash.obj)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ---------------------------------------------*/
   3          /* --- STC89-90xx Series MCU ISP/IAP/EEPROM Demo -------------------*/
   4          /* --- Mobile: (86)13922805190 -------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966----------------------*/
   7          /* --- Web: www.STCMCU.com -----------------------------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* If you want to use the program or the program referenced in the  */
  10          /* article, please specify in which data and procedures from STC    */
  11          /*------------------------------------------------------------------*/
  12          #include "reg51.h"
  13          #include "flash.h"
  14          
  15          //sbit p10=P1^0;
  16          //sbit p11=P1^1;
  17          //sbit p12=P1^2;
  18          //sbit p13=P1^3;
  19          //sbit p14=P1^4;
  20          //void main()
  21          //{
  22          //    WORD i;
  23          //    P1=0xff;
  24          //    p10=0x00;                      //1111,1110 System Reset OK
  25          //    Delay(10);                      //Delay
  26          //    IapEraseSector(IAP_ADDRESS);    //Erase current sector
  27          //    for (i=0; i<512; i++)           //Check whether all sector data is FF
  28          //    {
  29          //        if (IapReadByte(IAP_ADDRESS+i) != 0xff)
  30          //            goto Error;             //If error, break
  31          //    }
  32          //    p11=0x00;                      //1111,1100 Erase successful
  33          //    Delay(10);                      //Delay
  34          //    for (i=0; i<512; i++)           //Program 512 bytes data into data flash
  35          //    {
  36          //        IapProgramByte(IAP_ADDRESS+i, (BYTE)i);
  37          //    }
  38          //    p12=0x00;                      //1111,1000 Program successful
  39          //    Delay(10);                      //Delay
  40          //    for (i=0; i<512; i++)           //Verify 512 bytes data
  41          //    {
  42          //        if (IapReadByte(IAP_ADDRESS+i) != (BYTE)i)
  43          //            goto Error;             //If error, break
  44          //    }
  45          //    p13=0x00;                      //1111,0000 Verify successful
  46          //    while (1);
  47          //Error:
  48          //    p14=0x00;                    //0xxx,xxxx IAP operation fail
  49          //    while (1);
  50          //}
  51          
  52          /*----------------------------
  53          Software delay function
  54          ----------------------------*/
C51 COMPILER V9.52.0.0   FLASH                                                             04/05/2017 12:41:54 PAGE 2   

  55          void Delay(BYTE n)
  56          {
  57   1          WORD x;
  58   1      
  59   1          while (n--)
  60   1          {
  61   2              x = 0;
  62   2              while (++x);
  63   2          }
  64   1      }
  65          
  66          /*----------------------------
  67          Disable ISP/IAP/EEPROM function
  68          Make MCU in a safe state
  69          ----------------------------*/
  70          void IapIdle()
  71          {
  72   1          IAP_CONTR = 0;                  //Close IAP function
  73   1          IAP_CMD = 0;                    //Clear command to standby
  74   1          IAP_TRIG = 0;                   //Clear trigger register
  75   1          IAP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
  76   1          IAP_ADDRL = 0;                  //Clear IAP address to prevent misuse
  77   1      }
  78          
  79          /*----------------------------
  80          Read one byte from ISP/IAP/EEPROM area
  81          Input: addr (ISP/IAP/EEPROM address)
  82          Output:Flash data
  83          ----------------------------*/
  84          BYTE IapReadByte(WORD addr)
  85          {
  86   1          BYTE dat;                       //Data buffer
  87   1      
  88   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  89   1          IAP_CMD = CMD_READ;             //Set ISP/IAP/EEPROM READ command
  90   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  91   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  92   1          IAP_TRIG = 0x46;                //Send trigger command1 (0x46)
  93   1          IAP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
  94   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  95   1          dat = IAP_DATA;                 //Read ISP/IAP/EEPROM data
  96   1          IapIdle();                      //Close ISP/IAP/EEPROM function
  97   1      
  98   1          return dat;                     //Return Flash data
  99   1      }
 100          
 101          /*----------------------------
 102          Program one byte to ISP/IAP/EEPROM area
 103          Input: addr (ISP/IAP/EEPROM address)
 104                 dat (ISP/IAP/EEPROM data)
 105          Output:-
 106          ----------------------------*/
 107          void IapProgramByte(WORD addr, BYTE dat)
 108          {
 109   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
 110   1          IAP_CMD = CMD_PROGRAM;          //Set ISP/IAP/EEPROM PROGRAM command
 111   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
 112   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
 113   1          IAP_DATA = dat;                 //Write ISP/IAP/EEPROM data
 114   1          IAP_TRIG = 0x46;                //Send trigger command1 (0x46)
 115   1          IAP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
 116   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
C51 COMPILER V9.52.0.0   FLASH                                                             04/05/2017 12:41:54 PAGE 3   

 117   1          IapIdle();
 118   1      }
 119          
 120          /*----------------------------
 121          Erase one sector area
 122          Input: addr (ISP/IAP/EEPROM address)
 123          Output:-
 124          ----------------------------*/
 125          void IapEraseSector(WORD addr)
 126          {
 127   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
 128   1          IAP_CMD = CMD_ERASE;            //Set ISP/IAP/EEPROM ERASE command
 129   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
 130   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
 131   1          IAP_TRIG = 0x46;                //Send trigger command1 (0x46)
 132   1          IAP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
 133   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
 134   1          IapIdle();
 135   1      }
 136          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    103    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
